#ifndef SYM_CONFIG_PANEL_H
#define SYM_CONFIG_PANEL_H

#include "../../Empirical/include/emp/prefab/ConfigPanel.hpp"
#include "../../Empirical/include/emp/config/config.hpp"

class SymConfigPanel : public emp::prefab::ConfigPanel{
    protected:

    public:
    SymConfigPanel(emp::Config & config, bool open = true, const std::string & div_name = "") : ConfigPanel(config, open, div_name){
        info = new emp::prefab::internal::ConfigPanelInfo(div_name);
        this->AddAttr("class", "config_main");

        // Reset button redirects to a URL with the current config settings
        emp::web::Element reload_button{"a", emp::to_string(GetID(), "_", "reload")};
        reload_button.SetAttr("class", "btn btn-danger");
        std::stringstream query;
        config.WriteUrlQueryString(query);
        reload_button.SetAttr("href", query.str());
        reload_button << "Reload with changes";

        on_change_fun_t & onChangeRef = GetOnChangeFun();

        for (auto & group : config.GetGroupSet()) {
          const std::string group_name(group->GetName());
          const std::string group_desc(group->GetDesc());

          // Setting groups have IDs generated by "{main id}_{group name}_outer"
          const std::string group_base(emp::to_string(GetID(), "_", group_name, "_outer"));

          emp::prefab::Card group_card(open ? "INIT_OPEN" : "INIT_CLOSED", true, group_base);
          group_card.SetCSS("background", "pink");
          group_card.AddHeaderContent(group_desc);
          (*this) << group_card;
          // A div within card helps make grid without messing up collapse properties
          // and has ID "{main id}_{group name}" for ease of access
          Div settings(emp::to_string(GetID(), "_", group_name));
          settings.AddAttr("class", "settings_group");
          group_card << settings;

          for (size_t i = 0; i < group->GetSize(); ++i) {
            auto setting = group->GetEntry(i);
            // Get loads of information from the config setting
            const std::string name(setting->GetName());
            const std::string pretty_name(format_label(name));
            const std::string type(setting->GetType());
            const std::string desc(setting->GetDescription());
            const std::string value(setting->GetValue());

            // Settings have IDs generated by can be accessed via "{main id}_{setting name}"
            const std::string setting_base(emp::to_string(GetID(), "_", name));

            const auto handleChange = [
              name, reload=reload_button, &config, &handleChange = onChangeRef
            ] (const std::string & val) {
              config.Set(name, val);
              // Run the handler function in case user wants to trigger something when the config values
              // change (default does nothing)
              handleChange(name, val);
              // Update the reload button's href
              std::stringstream ss;
              config.WriteUrlQueryString(ss);
              static_cast<emp::web::Div>(reload).SetAttr("href", ss.str());
              // ^ TODO: need the cast a bug with SetAttr doesn't work for Element here, why?
            };

            // Add a different control depending on the config types
            if (emp::Has(numeric_types, type)) {
              settings << emp::prefab::NumericValueControl(
                pretty_name, desc, value, type, handleChange, setting_base
              );
            } else if (type == "std::string") {
              settings << emp::prefab::TextValueControl(
                pretty_name, desc, value, handleChange, setting_base
              );
            } else if (type == "bool") {
              settings << emp::prefab::BoolValueControl(
                pretty_name, desc, emp::from_string<bool>(value), handleChange, setting_base
              );
            } else {
              // If a setting type is unrecognized (e.g. a new type becomes supported in Config.hpp)
              // just display its value (should we add a warning to the description?)
              settings << emp::prefab::ValueDisplay(pretty_name, desc, value, setting_base);
            }
          }
        }

        // A div at the end for controls
        Div controls{emp::to_string(GetID(), "_", "controls")};
        controls.AddAttr("class", "config_controls");
        (*this) << controls;

        controls << reload_button;
    }

};

#endif